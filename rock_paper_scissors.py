import telebot as tb
from telebot import types
from random import randint

token = open("token.txt").readline()
bot = tb.TeleBot(token)
emoj = ['üóø', 'üìÑ', '‚úÇÔ∏è']
results = ['–í–∞—à–∞ –ø–æ–±–µ–¥–∞!\n–ù–∞–ø–æ–ª–Ω—è–π—Ç–µ –±–æ–∫–∞–ª—ã!', '–ù–∏—á—å—è.\n–°–º–∏—Ä–∏—Ç–µ—Å—å —Å —ç—Ç–∏–º.', '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...\n–£–¥–∞—á–∞ –Ω–µ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ']

#
# –ó–ê–ü–ò–°–¨\–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–´ –í –§–ê–ô–õ(–ï)
# –ï–°–õ–ò –ù–û–í–´–ô –ê–ô–î–ò, –¢–û –ó–ê–ü–ò–°–´–í–ê–ï–ú –í –§–ê–ô–õ
#
def write_res(id, res):
    lines = open('stats.txt','r').readlines()
    write_line = ''
    for idx, line in enumerate(lines):
        if str(id) in line:
            # 1 =wins 2=draw 3=lose
            #id0 allgames1 wins2 draws3 loses4
            splitted = line.split()
            if(res == 1):
                splitted[1] =  str(int(splitted[1]) + 1)
                splitted[2] = str(int(splitted[2]) + 1)
            elif(res == 2):
                splitted[1] =  str(int(splitted[1]) + 1)
                splitted[3] = str(int(splitted[3]) + 1)
            elif (res == 3):
                splitted[1] =  str(int(splitted[1]) + 1)
                splitted[4] = str(int(splitted[4]) + 1)
            elif (res == 4):
                rer = str(splitted[1])+' ' + str(splitted[2])+' '+ str(splitted[3])+ ' '+ str(splitted[4])
                return rer
            elif (res == 0):
                for i in range(1,5):
                    splitted[i] = '0'
            lines[idx] = ' '.join(splitted) + '\n'
            with open('stats.txt', 'w') as f:
                f.writelines(lines)
            break
    else:
        if (res == 1):
            write_line = f'{id} 1 1 0 0'
            with open('stats.txt', 'a') as f:
                f.write(write_line + '\n')
            return '1 1 0 0'
        elif (res == 2):
            write_line = f'{id} 1 0 1 0'
            with open('stats.txt', 'a') as f:
                f.write(write_line + '\n')
            return '1 0 1 0'
        elif (res == 3):
            write_line = f'{id} 1 0 0 1'
            with open('stats.txt', 'a') as f:
                f.write(write_line + '\n')
            return '1 0 0 1'
        elif (res == 4):
            write_line = f'{id} 0 0 0 0'
            with open('stats.txt', 'a') as f:
                f.write(write_line+'\n')
            return '0 0 0 0'


#–ü–†–ò–í–ï–¢–°–¢–í–ò–ï
@bot.message_handler(commands=['start'])
def start(msg):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ò–≥—Ä–∞—Ç—å")
    btn2 = types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    markup.add(btn1, btn2)
    bot.send_message(msg.from_user.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–º–µ–Ω—å,–Ω–æ–∂–Ω–∏—Ü—É,–±—É–º–∞–≥—É!\n–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–∞–∂–º–∏ –Ω–∞ \"C—Ç–∞—Ä—Ç\"\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—ã –Ω–∞–∂–º–∏ –Ω–∞ \"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\"", reply_markup=markup)

#–†–ï–ê–ö–¶–ò–ò –ù–ê –°–û–û–ë–©–ï–ù–ò–Ø
@bot.message_handler(content_types=['text'])
def get_text_msg(msg):
    if msg.text == '–ò–≥—Ä–∞—Ç—å':
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text = '–ö–∞–º–µ–Ω—åüóø', callback_data='stone')
        btn2 = types.InlineKeyboardButton(text='–ë—É–º–∞–≥–∞üìÑ', callback_data='paper')
        btn3 = types.InlineKeyboardButton(text='–ù–æ–∂–Ω–∏—Ü—ã‚úÇÔ∏è', callback_data='scissors')
        markup.add(btn1, btn2, btn3)
        bot.send_message(msg.from_user.id, "–ß—Ç–æ —Å—ã–≥—Ä–∞–µ—Ç–µ?", reply_markup=markup)
    elif msg.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        stat = write_res(msg.from_user.id, 4).split()
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text='–ò–≥—Ä–∞—Ç—å', callback_data='play')
        btn2 = types.InlineKeyboardButton(text='–û–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç—É', callback_data='clear_stats')
        bot.send_message(msg.from_user.id, f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n  –í—Å–µ–≥–æ –∏–≥—Ä:{stat[0]}\n  –ü–æ–±–µ–¥—ã:{stat[1]}\n  –ù–∏—á—å—è:{stat[2]}\n  –ü—Ä–æ–∏–≥—Ä—ã—à–∏:{stat[3]}")
        markup.add(btn1,btn2)
        bot.send_message(msg.from_user.id, "–°—ã–≥—Ä–∞–µ–º?", reply_markup=markup)

# 1 = stone, 2 =paper, 3 = scissors
# 1 = win 2 = draw 3 = lose

#–†–ï–ê–ö–¶–ò–ò –ù–ê –ö–ù–û–ü–ö–ò
@bot.callback_query_handler(func = lambda call: True)
def callback_handler(call):
    #—é–∑–µ—Ä –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É
    if(call.data == 'stone' or call.data == 'paper' or call.data =='scissors'):
        bot_txt = '–ë–æ—Ç –≤—ã–±—Ä–∞–ª: '
        user_txt = '–í—ã –≤—ã–±—Ä–∞–ª–∏: '
        final_txt = '–†–µ–∑—É–ª—å—Ç–∞—Ç –¥—É—ç–ª–∏: '
        bot_ans = randint(0, 2)
        if call.data == 'stone':
            user_txt+= emoj[0]
            if(bot_ans == 0):
                bot_txt+= emoj[0]
                final_txt += results[1]
                write_res(call.message.chat.id, 2)
            elif(bot_ans == 1):
                bot_txt += emoj[1]
                final_txt += results[2]
                write_res(call.message.chat.id, 3)
            elif (bot_ans == 2):
                bot_txt += emoj[2]
                final_txt += results[0]
                write_res(call.message.chat.id, 1)
        elif call.data == 'paper':
            user_txt+= emoj[1]
            if(bot_ans == 0):
                bot_txt+= emoj[0]
                final_txt += results[0]
                write_res(call.message.chat.id, 1)
            elif(bot_ans == 1):
                bot_txt += emoj[1]
                final_txt += results[1]
                write_res(call.message.chat.id, 2)
            elif (bot_ans == 2):
                bot_txt += emoj[2]
                final_txt += results[2]
                write_res(call.message.chat.id, 3)
        elif call.data == 'scissors':
            user_txt+= emoj[2]
            if(bot_ans == 0):
                bot_txt+= emoj[0]
                final_txt += results[2]
                write_res(call.message.chat.id, 3)
            elif(bot_ans == 1):
                bot_txt += emoj[1]
                final_txt += results[0]
                write_res(call.message.chat.id, 1)
            elif (bot_ans == 2):
                bot_txt += emoj[2]
                final_txt += results[1]
                write_res(call.message.chat.id, 2)
        answer = bot_txt + '\n' + user_txt + '\n' + final_txt + '\n'

        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text ="–ò–≥—Ä–∞—Ç—å", callback_data= 'play')
        btn2 = types.InlineKeyboardButton(text ='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data= 'stats')
        markup.add(btn1, btn2)
        bot.edit_message_text(answer, call.message.chat.id, call.message.message_id)
        bot.send_message(chat_id=call.message.chat.id, text="–°—ã–≥—Ä–∞–µ–º –≤–Ω–æ–≤—å?", reply_markup=markup)
    #—é–∑–µ—Ä –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    elif(call.data == 'play'):
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text='–ö–∞–º–µ–Ω—åüóø', callback_data='stone')
        btn2 = types.InlineKeyboardButton(text='–ë—É–º–∞–≥–∞üìÑ', callback_data='paper')
        btn3 = types.InlineKeyboardButton(text='–ù–æ–∂–Ω–∏—Ü—ã‚úÇÔ∏è', callback_data='scissors')
        markup.add(btn1, btn2, btn3)
        bot.edit_message_text(text="–ß—Ç–æ —Å—ã–≥—Ä–∞–µ—Ç–µ?", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)
    #—é–∑–µ—Ä –≤—ã–±—Ä–∞–ª –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç—ã
    elif(call.data == 'stats'):
        stat = write_res(call.message.chat.id, 4).split()
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text='–ò–≥—Ä–∞—Ç—å', callback_data='play')
        btn2 = types.InlineKeyboardButton(text='–û–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç—É', callback_data='clear_stats')
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                         text=f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n  –í—Å–µ–≥–æ –∏–≥—Ä:{stat[0]}\n  –ü–æ–±–µ–¥—ã:{stat[1]}\n  –ù–∏—á—å—è:{stat[2]}\n  –ü—Ä–æ–∏–≥—Ä—ã—à–∏:{stat[3]}")
        markup.add(btn1, btn2)
        bot.send_message(call.message.chat.id, "–°—ã–≥—Ä–∞–µ–º?", reply_markup=markup)
    #—é–∑–µ—Ä –≤—ã–±—Ä–∞–ª –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—ã
    elif(call.data == 'clear_stats'):
        write_res(call.message.chat.id, 0)
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text='–ò–≥—Ä–∞—Ç—å', callback_data='play')
        btn2 = types.InlineKeyboardButton(text='–û–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç—É', callback_data='clear_stats')
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω—É–ª–µ–Ω–∞")
        stat = write_res(call.message.chat.id, 4).split()
        bot.send_message(call.message.chat.id, f"–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n  –í—Å–µ–≥–æ –∏–≥—Ä:{stat[0]}\n  –ü–æ–±–µ–¥—ã:{stat[1]}\n  –ù–∏—á—å—è:{stat[2]}\n  –ü—Ä–æ–∏–≥—Ä—ã—à–∏:{stat[3]}", reply_markup=markup)
        markup.add(btn1, btn2)
        bot.send_message(call.message.chat.id, "–°—ã–≥—Ä–∞–µ–º?", reply_markup=markup)


if __name__ == '__main__':
    print('-------------–±–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É--------------')
    bot.infinity_polling()